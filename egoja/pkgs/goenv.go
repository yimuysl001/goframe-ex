package pkgs

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"goframe-ex/egoja/gojaapi"

	"io"
	"math"
	"math/big"
	"math/rand"
	"net"
	"net/http"
	"net/http/cookiejar"
	"net/url"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"runtime"
	"sort"
	"strings"
	"sync"
	"time"
)

func init() {

	gojaapi.RegisterImport("time", map[string]any{
		"ANSIC":                  time.ANSIC,
		"After":                  time.After,
		"AfterFunc":              time.AfterFunc,
		"April":                  time.April,
		"August":                 time.August,
		"Date":                   time.Date,
		"December":               time.December,
		"February":               time.February,
		"FixedZone":              time.FixedZone,
		"Friday":                 time.Friday,
		"Hour":                   time.Hour,
		"January":                time.January,
		"July":                   time.July,
		"June":                   time.June,
		"Kitchen":                time.Kitchen,
		"LoadLocation":           time.LoadLocation,
		"March":                  time.March,
		"May":                    time.May,
		"Microsecond":            time.Microsecond,
		"Millisecond":            time.Millisecond,
		"Minute":                 time.Minute,
		"Monday":                 time.Monday,
		"Nanosecond":             time.Nanosecond,
		"NewTicker":              time.NewTicker,
		"NewTimer":               time.NewTimer,
		"November":               time.November,
		"Now":                    time.Now,
		"October":                time.October,
		"Parse":                  time.Parse,
		"ParseDuration":          time.ParseDuration,
		"ParseInLocation":        time.ParseInLocation,
		"RFC1123":                time.RFC1123,
		"RFC1123Z":               time.RFC1123Z,
		"RFC3339":                time.RFC3339,
		"RFC3339Nano":            time.RFC3339Nano,
		"RFC822":                 time.RFC822,
		"RFC822Z":                time.RFC822Z,
		"RFC850":                 time.RFC850,
		"RubyDate":               time.RubyDate,
		"Saturday":               time.Saturday,
		"Second":                 time.Second,
		"September":              time.September,
		"Since":                  time.Since,
		"Sleep":                  time.Sleep,
		"Stamp":                  time.Stamp,
		"StampMicro":             time.StampMicro,
		"StampMilli":             time.StampMilli,
		"StampNano":              time.StampNano,
		"Sunday":                 time.Sunday,
		"Thursday":               time.Thursday,
		"Tick":                   time.Tick,
		"Tuesday":                time.Tuesday,
		"Unix":                   time.Unix,
		"UnixDate":               time.UnixDate,
		"Wednesday":              time.Wednesday,
		"Until":                  time.Until,
		"LoadLocationFromTZData": time.LoadLocationFromTZData,
	})

	gojaapi.RegisterImport("fmt", map[string]any{
		"Errorf":   fmt.Errorf,
		"Fprint":   fmt.Fprint,
		"Fprintf":  fmt.Fprintf,
		"Fprintln": fmt.Fprintln,
		"Fscan":    fmt.Fscan,
		"Fscanf":   fmt.Fscanf,
		"Fscanln":  fmt.Fscanln,
		"Print":    fmt.Print,
		"Printf":   fmt.Printf,
		"Println":  fmt.Println,
		"Scan":     fmt.Scan,
		"Scanf":    fmt.Scanf,
		"Scanln":   fmt.Scanln,
		"Sprint":   fmt.Sprint,
		"Sprintf":  fmt.Sprintf,
		"Sprintln": fmt.Sprintln,
		"Sscan":    fmt.Sscan,
		"Sscanf":   fmt.Sscanf,
		"Sscanln":  fmt.Sscanln,
	})

	gojaapi.RegisterImport("bytes", map[string]any{
		"Compare":         bytes.Compare,
		"Contains":        bytes.Contains,
		"Count":           bytes.Count,
		"Equal":           bytes.Equal,
		"EqualFold":       bytes.EqualFold,
		"Fields":          bytes.Fields,
		"FieldsFunc":      bytes.FieldsFunc,
		"HasPrefix":       bytes.HasPrefix,
		"HasSuffix":       bytes.HasSuffix,
		"Index":           bytes.Index,
		"IndexAny":        bytes.IndexAny,
		"IndexByte":       bytes.IndexByte,
		"IndexFunc":       bytes.IndexFunc,
		"IndexRune":       bytes.IndexRune,
		"Join":            bytes.Join,
		"LastIndex":       bytes.LastIndex,
		"LastIndexAny":    bytes.LastIndexAny,
		"LastIndexByte":   bytes.LastIndexByte,
		"LastIndexFunc":   bytes.LastIndexFunc,
		"Map":             bytes.Map,
		"NewBuffer":       bytes.NewBuffer,
		"NewBufferString": bytes.NewBufferString,
		"NewReader":       bytes.NewReader,
		"Repeat":          bytes.Repeat,
		"Replace":         bytes.Replace,
		"Runes":           bytes.Runes,
		"Split":           bytes.Split,
		"SplitAfter":      bytes.SplitAfter,
		"SplitAfterN":     bytes.SplitAfterN,
		"SplitN":          bytes.SplitN,
		"Title":           bytes.Title,
		"ToLower":         bytes.ToLower,
		"ToLowerSpecial":  bytes.ToLowerSpecial,
		"ToTitle":         bytes.ToTitle,
		"ToTitleSpecial":  bytes.ToTitleSpecial,
		"ToUpper":         bytes.ToUpper,
		"ToUpperSpecial":  bytes.ToUpperSpecial,
		"Trim":            bytes.Trim,
		"TrimFunc":        bytes.TrimFunc,
		"TrimLeft":        bytes.TrimLeft,
		"TrimLeftFunc":    bytes.TrimLeftFunc,
		"TrimPrefix":      bytes.TrimPrefix,
		"TrimRight":       bytes.TrimRight,
		"TrimRightFunc":   bytes.TrimRightFunc,
		"TrimSpace":       bytes.TrimSpace,
		"TrimSuffix":      bytes.TrimSuffix,
		"Buffer":          bytes.Buffer{},
		"Reader":          bytes.Reader{},
		"ContainsRune":    bytes.ContainsRune,
	})

	gojaapi.RegisterImport("encoding/json", map[string]any{
		"Marshal":   json.Marshal,
		"Unmarshal": json.Unmarshal,
	})
	gojaapi.RegisterImport("errors", map[string]any{
		"New": errors.New,
	})
	gojaapi.RegisterImport("io", map[string]any{
		"Copy":             io.Copy,
		"CopyN":            io.CopyN,
		"EOF":              io.EOF,
		"ErrClosedPipe":    io.ErrClosedPipe,
		"ErrNoProgress":    io.ErrNoProgress,
		"ErrShortBuffer":   io.ErrShortBuffer,
		"ErrShortWrite":    io.ErrShortWrite,
		"ErrUnexpectedEOF": io.ErrUnexpectedEOF,
		"LimitReader":      io.LimitReader,
		"MultiReader":      io.MultiReader,
		"MultiWriter":      io.MultiWriter,
		"NewSectionReader": io.NewSectionReader,
		"Pipe":             io.Pipe,
		"ReadAtLeast":      io.ReadAtLeast,
		"ReadFull":         io.ReadFull,
		"TeeReader":        io.TeeReader,
		"WriteString":      io.WriteString,
		"ReadAll":          io.ReadAll,
	})

	gojaapi.RegisterImport("os", map[string]any{
		"Args":              os.Args,
		"Chdir":             os.Chdir,
		"Chmod":             os.Chmod,
		"Chown":             os.Chown,
		"Chtimes":           os.Chtimes,
		"Clearenv":          os.Clearenv,
		"Getppid":           os.Getppid,
		"Create":            os.Create,
		"DevNull":           os.DevNull,
		"Environ":           os.Environ,
		"ErrExist":          os.ErrExist,
		"ErrInvalid":        os.ErrInvalid,
		"ErrNotExist":       os.ErrNotExist,
		"ErrPermission":     os.ErrPermission,
		"Exit":              os.Exit,
		"Expand":            os.Expand,
		"ExpandEnv":         os.ExpandEnv,
		"FindProcess":       os.FindProcess,
		"Getegid":           os.Getegid,
		"Getenv":            os.Getenv,
		"Geteuid":           os.Geteuid,
		"Getgid":            os.Getgid,
		"Getgroups":         os.Getgroups,
		"Getpagesize":       os.Getpagesize,
		"Getpid":            os.Getpid,
		"Getuid":            os.Getuid,
		"Getwd":             os.Getwd,
		"Hostname":          os.Hostname,
		"Interrupt":         os.Interrupt,
		"IsExist":           os.IsExist,
		"IsNotExist":        os.IsNotExist,
		"IsPathSeparator":   os.IsPathSeparator,
		"IsPermission":      os.IsPermission,
		"Kill":              os.Kill,
		"Lchown":            os.Lchown,
		"Link":              os.Link,
		"Lstat":             os.Lstat,
		"Mkdir":             os.Mkdir,
		"MkdirAll":          os.MkdirAll,
		"ModeAppend":        os.ModeAppend,
		"ModeCharDevice":    os.ModeCharDevice,
		"ModeDevice":        os.ModeDevice,
		"ModeDir":           os.ModeDir,
		"ModeExclusive":     os.ModeExclusive,
		"ModeNamedPipe":     os.ModeNamedPipe,
		"ModePerm":          os.ModePerm,
		"ModeSetgid":        os.ModeSetgid,
		"ModeSetuid":        os.ModeSetuid,
		"ModeSocket":        os.ModeSocket,
		"ModeSticky":        os.ModeSticky,
		"ModeSymlink":       os.ModeSymlink,
		"ModeTemporary":     os.ModeTemporary,
		"ModeType":          os.ModeType,
		"NewFile":           os.NewFile,
		"NewSyscallError":   os.NewSyscallError,
		"O_APPEND":          os.O_APPEND,
		"O_CREATE":          os.O_CREATE,
		"O_EXCL":            os.O_EXCL,
		"O_RDONLY":          os.O_RDONLY,
		"O_RDWR":            os.O_RDWR,
		"O_SYNC":            os.O_SYNC,
		"O_TRUNC":           os.O_TRUNC,
		"O_WRONLY":          os.O_WRONLY,
		"Open":              os.Open,
		"OpenFile":          os.OpenFile,
		"PathListSeparator": os.PathListSeparator,
		"PathSeparator":     os.PathSeparator,
		"Pipe":              os.Pipe,
		"Readlink":          os.Readlink,
		"Remove":            os.Remove,
		"RemoveAll":         os.RemoveAll,
		"Rename":            os.Rename,
		"SEEK_CUR":          os.SEEK_CUR,
		"SEEK_END":          os.SEEK_END,
		"SEEK_SET":          os.SEEK_SET,
		"SameFile":          os.SameFile,
		"Setenv":            os.Setenv,
		"StartProcess":      os.StartProcess,
		"Stat":              os.Stat,
		"Stderr":            os.Stderr,
		"Stdin":             os.Stdin,
		"Stdout":            os.Stdout,
		"Symlink":           os.Symlink,
		"TempDir":           os.TempDir,
		"Truncate":          os.Truncate,
		"ReadDir":           os.ReadDir,
		"ReadFile":          os.ReadFile,
		"WriteFile":         os.WriteFile,
	})

	gojaapi.RegisterImport("strings", map[string]any{
		"Contains":       strings.Contains,
		"ContainsAny":    strings.ContainsAny,
		"ContainsRune":   strings.ContainsRune,
		"Count":          strings.Count,
		"EqualFold":      strings.EqualFold,
		"Fields":         strings.Fields,
		"FieldsFunc":     strings.FieldsFunc,
		"HasPrefix":      strings.HasPrefix,
		"HasSuffix":      strings.HasSuffix,
		"Index":          strings.Index,
		"IndexAny":       strings.IndexAny,
		"IndexByte":      strings.IndexByte,
		"IndexFunc":      strings.IndexFunc,
		"IndexRune":      strings.IndexRune,
		"Join":           strings.Join,
		"LastIndex":      strings.LastIndex,
		"LastIndexAny":   strings.LastIndexAny,
		"LastIndexFunc":  strings.LastIndexFunc,
		"Map":            strings.Map,
		"NewReader":      strings.NewReader,
		"NewReplacer":    strings.NewReplacer,
		"Repeat":         strings.Repeat,
		"Replace":        strings.Replace,
		"Split":          strings.Split,
		"SplitAfter":     strings.SplitAfter,
		"SplitAfterN":    strings.SplitAfterN,
		"SplitN":         strings.SplitN,
		"Title":          strings.Title,
		"ToLower":        strings.ToLower,
		"ToLowerSpecial": strings.ToLowerSpecial,
		"ToTitle":        strings.ToTitle,
		"ToTitleSpecial": strings.ToTitleSpecial,
		"ToUpper":        strings.ToUpper,
		"ToUpperSpecial": strings.ToUpperSpecial,
		"Trim":           strings.Trim,
		"TrimFunc":       strings.TrimFunc,
		"TrimLeft":       strings.TrimLeft,
		"TrimLeftFunc":   strings.TrimLeftFunc,
		"TrimPrefix":     strings.TrimPrefix,
		"TrimRight":      strings.TrimRight,
		"TrimRightFunc":  strings.TrimRightFunc,
		"TrimSpace":      strings.TrimSpace,
		"TrimSuffix":     strings.TrimSuffix,
		"Builder":        strings.Builder{},
	})

	gojaapi.RegisterImport("sync", map[string]any{
		"NewCond":   sync.NewCond,
		"Cond":      sync.Cond{},
		"Mutex":     sync.Mutex{},
		"Once":      sync.Once{},
		"Pool":      sync.Pool{},
		"RWMutex":   sync.RWMutex{},
		"WaitGroup": sync.WaitGroup{},
		"Map":       sync.Map{},
	})

	gojaapi.RegisterImport("sort", map[string]any{
		"Float64s":          sort.Float64s,
		"Float64sAreSorted": sort.Float64sAreSorted,
		"Ints":              sort.Ints,
		"IntsAreSorted":     sort.IntsAreSorted,
		"IsSorted":          sort.IsSorted,
		"Search":            sort.Search,
		"SearchFloat64s":    sort.SearchFloat64s,
		"SearchInts":        sort.SearchInts,
		"SearchStrings":     sort.SearchStrings,
		"Sort":              sort.Sort,
		"Stable":            sort.Stable,
		"Strings":           sort.Strings,
		"StringsAreSorted":  sort.StringsAreSorted,
		"Float64Slice":      sort.Float64Slice{},
		"IntSlice":          sort.IntSlice{},
		"StringSlice":       sort.StringSlice{},
		"Slice":             sort.Slice,
		"SliceIsSorted":     sort.SliceIsSorted,
		"SliceStable":       sort.SliceStable,
	})

	gojaapi.RegisterImport("path", map[string]any{
		"Base":          path.Base,
		"Clean":         path.Clean,
		"Dir":           path.Dir,
		"ErrBadPattern": path.ErrBadPattern,
		"Ext":           path.Ext,
		"IsAbs":         path.IsAbs,
		"Join":          path.Join,
		"Match":         path.Match,
		"Split":         path.Split,
	})
	gojaapi.RegisterImport("path/filepath", map[string]any{
		"Abs":          filepath.Abs,
		"Base":         filepath.Base,
		"Clean":        filepath.Clean,
		"Dir":          filepath.Dir,
		"EvalSymlinks": filepath.EvalSymlinks,
		"Ext":          filepath.Ext,
		"FromSlash":    filepath.FromSlash,
		"Glob":         filepath.Glob,
		"HasPrefix":    filepath.HasPrefix,
		"IsAbs":        filepath.IsAbs,
		"Join":         filepath.Join,
		"Match":        filepath.Match,
		"Rel":          filepath.Rel,
		"Split":        filepath.Split,
		"SplitList":    filepath.SplitList,
		"ToSlash":      filepath.ToSlash,
		"VolumeName":   filepath.VolumeName,
	})

	gojaapi.RegisterImport("runtime", map[string]any{
		"GC":         runtime.GC,
		"GOARCH":     runtime.GOARCH,
		"GOMAXPROCS": runtime.GOMAXPROCS,
		"GOOS":       runtime.GOOS,
		"GOROOT":     runtime.GOROOT,
		"Version":    runtime.Version,
	})

	gojaapi.RegisterImport("regexp", map[string]any{
		"Match":            regexp.Match,
		"MatchReader":      regexp.MatchReader,
		"MatchString":      regexp.MatchString,
		"QuoteMeta":        regexp.QuoteMeta,
		"Compile":          regexp.Compile,
		"CompilePOSIX":     regexp.CompilePOSIX,
		"MustCompile":      regexp.MustCompile,
		"MustCompilePOSIX": regexp.MustCompilePOSIX,
	})

	gojaapi.RegisterImport("math", map[string]any{
		"Abs":             math.Abs,
		"Acos":            math.Acos,
		"Acosh":           math.Acosh,
		"Asin":            math.Asin,
		"Asinh":           math.Asinh,
		"Atan":            math.Atan,
		"Atan2":           math.Atan2,
		"Atanh":           math.Atanh,
		"Cbrt":            math.Cbrt,
		"Ceil":            math.Ceil,
		"Copysign":        math.Copysign,
		"Cos":             math.Cos,
		"Cosh":            math.Cosh,
		"Dim":             math.Dim,
		"Erf":             math.Erf,
		"Erfc":            math.Erfc,
		"Exp":             math.Exp,
		"Exp2":            math.Exp2,
		"Expm1":           math.Expm1,
		"Float32bits":     math.Float32bits,
		"Float32frombits": math.Float32frombits,
		"Float64bits":     math.Float64bits,
		"Float64frombits": math.Float64frombits,
		"Floor":           math.Floor,
		"Frexp":           math.Frexp,
		"Gamma":           math.Gamma,
		"Hypot":           math.Hypot,
		"Ilogb":           math.Ilogb,
		"Inf":             math.Inf,
		"IsInf":           math.IsInf,
		"IsNaN":           math.IsNaN,
		"J0":              math.J0,
		"J1":              math.J1,
		"Jn":              math.Jn,
		"Ldexp":           math.Ldexp,
		"Lgamma":          math.Lgamma,
		"Log":             math.Log,
		"Log10":           math.Log10,
		"Log1p":           math.Log1p,
		"Log2":            math.Log2,
		"Logb":            math.Logb,
		"Max":             math.Max,
		"Min":             math.Min,
		"Mod":             math.Mod,
		"Modf":            math.Modf,
		"NaN":             math.NaN,
		"Nextafter":       math.Nextafter,
		"Pow":             math.Pow,
		"Pow10":           math.Pow10,
		"Remainder":       math.Remainder,
		"Signbit":         math.Signbit,
		"Sin":             math.Sin,
		"Sincos":          math.Sincos,
		"Sinh":            math.Sinh,
		"Sqrt":            math.Sqrt,
		"Tan":             math.Tan,
		"Tanh":            math.Tanh,
		"Trunc":           math.Trunc,
		"Y0":              math.Y0,
		"Y1":              math.Y1,
		"Yn":              math.Yn,
	})
	gojaapi.RegisterImport("math/big", map[string]any{
		"Above":         big.Above,
		"AwayFromZero":  big.AwayFromZero,
		"Below":         big.Below,
		"Exact":         big.Exact,
		"Jacobi":        big.Jacobi,
		"MaxBase":       big.MaxBase,
		"MaxExp":        big.MaxExp,
		"MaxPrec":       big.MaxPrec,
		"MinExp":        big.MinExp,
		"NewFloat":      big.NewFloat,
		"NewInt":        big.NewInt,
		"NewRat":        big.NewRat,
		"ParseFloat":    big.ParseFloat,
		"ToNearestAway": big.ToNearestAway,
		"ToNearestEven": big.ToNearestEven,
		"ToNegativeInf": big.ToNegativeInf,
		"ToPositiveInf": big.ToPositiveInf,
		"ToZero":        big.ToZero,
	})
	gojaapi.RegisterImport("math/rand", map[string]any{
		"ExpFloat64":  rand.ExpFloat64,
		"Float32":     rand.Float32,
		"Float64":     rand.Float64,
		"Int":         rand.Int,
		"Int31":       rand.Int31,
		"Int31n":      rand.Int31n,
		"Int63":       rand.Int63,
		"Int63n":      rand.Int63n,
		"Intn":        rand.Intn,
		"NormFloat64": rand.NormFloat64,
		"Perm":        rand.Perm,
		"Seed":        rand.Seed,
		"Uint32":      rand.Uint32,
	})

	gojaapi.RegisterImport("net", map[string]any{
		"CIDRMask":                   net.CIDRMask,
		"Dial":                       net.Dial,
		"DialIP":                     net.DialIP,
		"DialTCP":                    net.DialTCP,
		"DialTimeout":                net.DialTimeout,
		"DialUDP":                    net.DialUDP,
		"DialUnix":                   net.DialUnix,
		"ErrWriteToConnected":        net.ErrWriteToConnected,
		"FileConn":                   net.FileConn,
		"FileListener":               net.FileListener,
		"FilePacketConn":             net.FilePacketConn,
		"FlagBroadcast":              net.FlagBroadcast,
		"FlagLoopback":               net.FlagLoopback,
		"FlagMulticast":              net.FlagMulticast,
		"FlagPointToPoint":           net.FlagPointToPoint,
		"FlagUp":                     net.FlagUp,
		"IPv4":                       net.IPv4,
		"IPv4Mask":                   net.IPv4Mask,
		"IPv4allrouter":              net.IPv4allrouter,
		"IPv4allsys":                 net.IPv4allsys,
		"IPv4bcast":                  net.IPv4bcast,
		"IPv4len":                    net.IPv4len,
		"IPv4zero":                   net.IPv4zero,
		"IPv6interfacelocalallnodes": net.IPv6interfacelocalallnodes,
		"IPv6len":                    net.IPv6len,
		"IPv6linklocalallnodes":      net.IPv6linklocalallnodes,
		"IPv6linklocalallrouters":    net.IPv6linklocalallrouters,
		"IPv6loopback":               net.IPv6loopback,
		"IPv6unspecified":            net.IPv6unspecified,
		"IPv6zero":                   net.IPv6zero,
		"InterfaceAddrs":             net.InterfaceAddrs,
		"InterfaceByIndex":           net.InterfaceByIndex,
		"InterfaceByName":            net.InterfaceByName,
		"Interfaces":                 net.Interfaces,
		"JoinHostPort":               net.JoinHostPort,
		"Listen":                     net.Listen,
		"ListenIP":                   net.ListenIP,
		"ListenMulticastUDP":         net.ListenMulticastUDP,
		"ListenPacket":               net.ListenPacket,
		"ListenTCP":                  net.ListenTCP,
		"ListenUDP":                  net.ListenUDP,
		"ListenUnix":                 net.ListenUnix,
		"ListenUnixgram":             net.ListenUnixgram,
		"LookupAddr":                 net.LookupAddr,
		"LookupCNAME":                net.LookupCNAME,
		"LookupHost":                 net.LookupHost,
		"LookupIP":                   net.LookupIP,
		"LookupMX":                   net.LookupMX,
		"LookupNS":                   net.LookupNS,
		"LookupPort":                 net.LookupPort,
		"LookupSRV":                  net.LookupSRV,
		"LookupTXT":                  net.LookupTXT,
		"ParseCIDR":                  net.ParseCIDR,
		"ParseIP":                    net.ParseIP,
		"ParseMAC":                   net.ParseMAC,
		"Pipe":                       net.Pipe,
		"ResolveIPAddr":              net.ResolveIPAddr,
		"ResolveTCPAddr":             net.ResolveTCPAddr,
		"ResolveUDPAddr":             net.ResolveUDPAddr,
		"ResolveUnixAddr":            net.ResolveUnixAddr,
		"SplitHostPort":              net.SplitHostPort,
	})

	gojaapi.RegisterImport("net/http/cookiejar", map[string]any{
		"New":     cookiejar.New,
		"Options": cookiejar.Options{},
	})
	gojaapi.RegisterImport("net/http", map[string]any{
		"DefaultClient":     http.DefaultClient,
		"DefaultServeMux":   http.DefaultServeMux,
		"DefaultTransport":  http.DefaultTransport,
		"Handle":            http.Handle,
		"HandleFunc":        http.HandleFunc,
		"ListenAndServe":    http.ListenAndServe,
		"ListenAndServeTLS": http.ListenAndServeTLS,
		"NewRequest":        http.NewRequest,
		"NewServeMux":       http.NewServeMux,
		"Serve":             http.Serve,
		"SetCookie":         http.SetCookie,
		"Client":            http.Client{},
		"Cookie":            http.Cookie{},
		"Request":           http.Request{},
		"Response":          http.Response{},
	})

	gojaapi.RegisterImport("net/url", map[string]any{
		"QueryEscape":     url.QueryEscape,
		"QueryUnescape":   url.QueryUnescape,
		"Parse":           url.Parse,
		"ParseRequestURI": url.ParseRequestURI,
		"User":            url.User,
		"UserPassword":    url.UserPassword,
		"ParseQuery":      url.ParseQuery,
		"Error":           url.Error{},
		"URL":             url.URL{},
		"Values":          url.Values{},
	})

}
